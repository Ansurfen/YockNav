import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,d as e}from"./app-62237bf4.js";const l={},p=e(`<h2 id="nohup" tabindex="-1"><a class="header-anchor" href="#nohup" aria-hidden="true">#</a> nohup()</h2><ul><li>原型</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param cmd string</span>
<span class="token comment">---@return err</span>
<span class="token keyword">function</span> <span class="token function">nohup</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>介绍</li></ul><p>nohup 隐藏窗口地启动后台进程。</p><h2 id="pgrep-info" tabindex="-1"><a class="header-anchor" href="#pgrep-info" aria-hidden="true">#</a> pgrep_info</h2><ul><li>name string</li><li>pid integer</li></ul><h2 id="pgrep" tabindex="-1"><a class="header-anchor" href="#pgrep" aria-hidden="true">#</a> pgrep()</h2><ul><li>原型</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param name string</span>
<span class="token comment">---@return pgrep_info[]</span>
<span class="token keyword">function</span> <span class="token function">pgrep</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>介绍</li></ul><p>pgrep 根据进程名称返回相关信息。</p><h2 id="ps-info" tabindex="-1"><a class="header-anchor" href="#ps-info" aria-hidden="true">#</a> ps_info</h2><ul><li>name string</li><li>cmd string</li><li>cpu? number</li><li>start? number</li><li>mem? any</li><li>user? string</li></ul><h2 id="ps-opt" tabindex="-1"><a class="header-anchor" href="#ps-opt" aria-hidden="true">#</a> ps_opt</h2><ul><li>user? boolean # 当设置 true，包含进程的执行者</li><li>cpu? boolean # 当设置 true，包含 cpu 在调用那一刻的使用率</li><li>time? boolean # 当设置 true，包含进程的开始时间</li><li>mem? boolean # 当设置 true，包含进程的内存使用率</li></ul><h2 id="ps" tabindex="-1"><a class="header-anchor" href="#ps" aria-hidden="true">#</a> ps()</h2><ul><li>原型</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param opt ps_opt|string|integer|nil</span>
<span class="token comment">---@return table&lt;integer, ps_info&gt;</span>
<span class="token keyword">function</span> <span class="token function">ps</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>介绍</li></ul><p>ps 列出所有进程状态，当opt为空时。值得注意的是，默认情况下只有 cmd (命令) 和 name（进程名）字段。如果你想要获得更详细的信息，尝试使用 ps_opt (table) 格式去获取。</p><p>除了以上介绍的两种方式，还有两种查询方式，一种是指明 pid，另一个是模糊匹配 cmd 字符串。</p><ul><li><p>选项</p><ul><li>opt, <a href="#ps-opt">ps_opt</a></li></ul></li><li><p>示例</p></li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> info<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">ps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 抓取所有</span>
<span class="token function">yassert</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
table<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>
<span class="token function">ps</span><span class="token punctuation">(</span><span class="token punctuation">{</span> mem <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> user <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">-- 列出所有进程信息，同时附带内存使用率和进程执行者信息</span>
<span class="token function">ps</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">-- 查询 pid 20的进程信息</span>
<span class="token function">ps</span><span class="token punctuation">(</span><span class="token string">&quot;yock&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- 模糊匹配命令带 yock 的进程信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="kill" tabindex="-1"><a class="header-anchor" href="#kill" aria-hidden="true">#</a> kill()</h2><ul><li>原型</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k integer|string</span>
<span class="token comment">---@return err</span>
<span class="token keyword">function</span> <span class="token function">kill</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>介绍</li></ul><p>kill 根据给定的 pid 或者 进程名 杀死进程。</p>`,29),i=[p];function t(o,c){return a(),s("div",null,i)}const d=n(l,[["render",t],["__file","process.html.vue"]]);export{d as default};
