import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,d as e}from"./app-0d28c3d4.js";const t={},l=e(`<h2 id="pwd" tabindex="-1"><a class="header-anchor" href="#pwd" aria-hidden="true">#</a> pwd()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@return string, err</span>
<span class="token keyword">function</span> <span class="token function">pwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>pwd returns working directory for current program</p><h2 id="whereis" tabindex="-1"><a class="header-anchor" href="#whereis" aria-hidden="true">#</a> whereis()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token comment">---@return string, err</span>
<span class="token keyword">function</span> <span class="token function">whereis</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>whereis returns absolute path</p><h2 id="alias" tabindex="-1"><a class="header-anchor" href="#alias" aria-hidden="true">#</a> alias()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token comment">---@param v string</span>
<span class="token keyword">function</span> <span class="token function">alias</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>alias takes an alias v for k, and it isn&#39;t directly call alias command on terminal or shell but saves it in the program&#39;s memory for mapping commands the <code>sh</code> function call.</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">&quot;CC&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;go&quot;</span><span class="token punctuation">)</span>
<span class="token function">sh</span><span class="token punctuation">(</span><span class="token string">&quot;$CC version&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unalias" tabindex="-1"><a class="header-anchor" href="#unalias" aria-hidden="true">#</a> unalias()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@vararg string</span>
<span class="token keyword">function</span> <span class="token function">unalias</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>unalias remove mapping relationship from alias.</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">&quot;CC&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;go&quot;</span><span class="token punctuation">)</span>
<span class="token function">unalias</span><span class="token punctuation">(</span><span class="token string">&quot;CC&quot;</span><span class="token punctuation">)</span>
<span class="token function">sh</span><span class="token punctuation">(</span><span class="token string">&quot;$CC version&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="export" tabindex="-1"><a class="header-anchor" href="#export" aria-hidden="true">#</a> export()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token comment">---@param v string</span>
<span class="token comment">---@return err</span>
<span class="token keyword">function</span> <span class="token function">export</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>export sets user&#39;s environment variable for ever. If you only want to set temporary or local variable, see the <code>exportl</code> function. <code>NOTE</code>: In current overload, write is overwrite format. If you want to write by append, see other overload function.</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token operator">#</span> hardly hurt
<span class="token function">export</span><span class="token punctuation">(</span><span class="token string">&quot;PATH:/bin/yock&quot;</span><span class="token punctuation">)</span>
<span class="token operator">#</span> append write into PATH when value isn<span class="token string">&#39;t exist, and it&#39;</span>s available on windows<span class="token punctuation">,</span>
<span class="token operator">#</span> which meant that it isn&#39;t required using Path instead of PATH<span class="token punctuation">.</span>

<span class="token operator">#</span> please keep cautious!!!
<span class="token function">export</span><span class="token punctuation">(</span><span class="token string">&quot;PATH&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/bin/yock&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- it&#39;ll overwrite entire PATH&#39;s value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="export-1" tabindex="-1"><a class="header-anchor" href="#export-1" aria-hidden="true">#</a> export()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param kv string</span>
<span class="token comment">---@return err</span>
<span class="token keyword">function</span> <span class="token function">export</span><span class="token punctuation">(</span>kv<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>export sets user&#39;s environment variable for ever. If you only want to set temporary or local variable, see the <code>exportl</code> function. Comparing with <code>export(k, v)</code>, the overload function is conservative, and write value by append. If you want to overwrite entire value, see other overload function.</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">export</span><span class="token punctuation">(</span><span class="token string">&quot;PATH:/bin/yock&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="unset" tabindex="-1"><a class="header-anchor" href="#unset" aria-hidden="true">#</a> unset()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token keyword">function</span> <span class="token function">unset</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>unset removes specified environment variable for ever. If you only want to set temporary, or local variable, see the <code>unsetl</code> function. Just like export, the unset function supports entire delete and deletes one of values for specified key.</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token operator">#</span> entire deletes
<span class="token function">unset</span><span class="token punctuation">(</span><span class="token string">&quot;PATH&quot;</span><span class="token punctuation">)</span>

<span class="token operator">#</span> deletes one of values <span class="token keyword">for</span> specified key
<span class="token function">unset</span><span class="token punctuation">(</span><span class="token string">&quot;PATH:/bin/yock&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exportl" tabindex="-1"><a class="header-anchor" href="#exportl" aria-hidden="true">#</a> exportl()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token comment">---@param v string</span>
<span class="token comment">---@return err</span>
<span class="token keyword">function</span> <span class="token function">exportl</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>exportl set temporary or local environment variable, and less like the <code>export</code> function it fails to write by append, and only supports to overwrite entire key, which meant you may need two step to complete append operation.</p><h2 id="unsetl" tabindex="-1"><a class="header-anchor" href="#unsetl" aria-hidden="true">#</a> unsetl()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token comment">---@return err</span>
<span class="token keyword">function</span> <span class="token function">unsetl</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>unsetl removes temporary or local environment variable, and less like the <code>export</code> function it fails to removes one of values, and only supports to remove entire key, which meant you may need two step to complete append operation.</p><h2 id="environ" tabindex="-1"><a class="header-anchor" href="#environ" aria-hidden="true">#</a> environ()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token comment">---@return string[]</span>
<span class="token keyword">function</span> <span class="token function">environ</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>environ returns values of environment variables k, and if v includes multiple values (e.g. PATH), then it&#39;ll be split into string array.</p><h2 id="environ-1" tabindex="-1"><a class="header-anchor" href="#environ-1" aria-hidden="true">#</a> environ()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@return table&lt;string, string&gt;</span>
<span class="token keyword">function</span> <span class="token function">environ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>environ returns all environment variables</p>`,65),i=[l];function o(r,u){return a(),s("div",null,i)}const d=n(t,[["render",o],["__file","workspace.html.vue"]]);export{d as default};
