import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,e as s,f as n,b as t,d as p}from"./app-0d28c3d4.js";const l={},u=p(`<p><code>注意</code>: 由于GNU命令过于庞杂，因此对于相关函数以代码和注释的形式穿插介绍。</p><h2 id="原生执行" tabindex="-1"><a class="header-anchor" href="#原生执行" aria-hidden="true">#</a> 原生执行</h2><p>调用终端直接执行，对于不同平台相同命令不同flag并不具备适配的能力。因此，如果你想获得更好的跨平台能力，最好仅使用原本就跨平台的命令。例如，支持跨平台的命令: go mod, npm; 不支持跨平台的命令: 操作系统原生命令（tasklist, ps）。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 根据环境取别名，这个别名是存在于yock内存中的，而不是直接在终端执行</span>
<span class="token keyword">local</span> env <span class="token operator">=</span> <span class="token string">&quot;dev&quot;</span>
<span class="token keyword">if</span> env <span class="token operator">==</span> <span class="token string">&quot;dev&quot;</span> <span class="token keyword">then</span>
    <span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">&quot;CC&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;go.exe&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span>
    <span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">&quot;CC&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;go&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
<span class="token comment">-- unalias(&quot;CC&quot;) -- 删除映射</span>
<span class="token comment">-- 调用子进程执行，在执行前会先映射别名</span>
<span class="token function">sh</span><span class="token punctuation">(</span><span class="token string">&quot;$CC version&quot;</span><span class="token punctuation">)</span>
<span class="token comment">-- 以下为sh命令不同重载形式</span>
<span class="token function">sh</span><span class="token punctuation">(</span><span class="token string">&quot;echo a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;echo b&quot;</span><span class="token punctuation">)</span>

<span class="token function">sh</span><span class="token punctuation">(</span><span class="token string">[[
echo a
echo b
]]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="io相关" tabindex="-1"><a class="header-anchor" href="#io相关" aria-hidden="true">#</a> IO相关</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- 创建a, b目录</span>
<span class="token comment">-- ls命令返回include目录下面子文件和子目录，以数组的形式</span>
<span class="token comment">-- 在lua中数组和map都共用在table数据结构中</span>
<span class="token keyword">local</span> res <span class="token operator">=</span> <span class="token function">ls</span><span class="token punctuation">(</span><span class="token string">&quot;include&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;table&quot;</span> <span class="token keyword">then</span> <span class="token comment">-- 类型判断是否为数组</span>
    table<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token keyword">elseif</span> <span class="token function">type</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;string&quot;</span> <span class="token keyword">then</span> <span class="token comment">-- 判断是否为字符串，可以利用awk grep提取，而不是对象化操作数据</span>
    <span class="token function">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token keyword">end</span>
<span class="token comment">-- 清屏</span>
<span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">-- 创建一个a.txt的空文件</span>
<span class="token function">touch</span><span class="token punctuation">(</span><span class="token string">&quot;a.txt&quot;</span><span class="token punctuation">)</span>
<span class="token comment">-- 输出到屏幕上</span>
<span class="token function">echo</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span>
<span class="token comment">-- fd 为 file descriptor 文件描述符的缩写, stdout 为屏幕</span>
<span class="token comment">-- mode c (创建) | t (覆盖写) | rw(读写打开) 文件打开的模式</span>
<span class="token function">echo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> fd <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;stdout&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test.txt&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> mode <span class="token operator">=</span> <span class="token string">&quot;c|t|rw&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span>
<span class="token comment">-- mode a(追加写)</span>
<span class="token function">echo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> fd <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;stdout&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test.txt&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> mode <span class="token operator">=</span> <span class="token string">&quot;c|a|rw&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span>
<span class="token comment">-- 类比rmdir 只能删除没有文件的空目录</span>
<span class="token function">rm</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>
<span class="token comment">-- 不安全的删除，会递归删除a目录下所有文件和子目录</span>
<span class="token function">rm</span><span class="token punctuation">(</span><span class="token punctuation">{</span> safe <span class="token operator">=</span> <span class="token keyword">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>
<span class="token comment">-- 将a目录拷贝到b目录下</span>
<span class="token function">cp</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span>
<span class="token comment">-- 递归将src拷贝到dst下面，map接受的参数为 源目录(src)-&gt;目标目录(dst)</span>
<span class="token function">cp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>recurse <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;b&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">-- 将a目标移动到b目录下面，这是递归的</span>
<span class="token function">mv</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span>
<span class="token comment">-- 读取a.txt的内容</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">cat</span><span class="token punctuation">(</span><span class="token string">&quot;a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">-- 等待用户输入从键盘</span>
<span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
<span class="token function">sh</span><span class="token punctuation">(</span><span class="token string">[[echo &quot;Hello $name&quot;]]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="工作区相关" tabindex="-1"><a class="header-anchor" href="#工作区相关" aria-hidden="true">#</a> 工作区相关</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">cd</span><span class="token punctuation">(</span><span class="token string">&quot;..&quot;</span><span class="token punctuation">)</span>
<span class="token comment">--- 返回当前工作目录</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">pwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">-- 获取yock可执行文件的绝对路径</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">whereis</span><span class="token punctuation">(</span><span class="token string">&quot;yock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">-- 向环境变量写入a = b, 注意这是永久性</span>
<span class="token function">export</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span>
<span class="token comment">-- 向环境变量a追加写</span>
<span class="token function">export</span><span class="token punctuation">(</span><span class="token string">&quot;a:c&quot;</span><span class="token punctuation">)</span>
<span class="token comment">-- 删除环境变量a</span>
<span class="token function">unset</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="权限相关" tabindex="-1"><a class="header-anchor" href="#权限相关" aria-hidden="true">#</a> 权限相关</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 查看当前用户</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">whoami</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">-- 类比 chmod 777 yock.exe</span>
<span class="token function">chmod</span><span class="token punctuation">(</span><span class="token string">&quot;yock.exe&quot;</span><span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span>
<span class="token comment">-- chown(&quot;&quot;)</span>
<span class="token comment">-- 以管理员权限打开</span>
<span class="token function">sudo</span><span class="token punctuation">(</span><span class="token string">&quot;yock&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="进程相关" tabindex="-1"><a class="header-anchor" href="#进程相关" aria-hidden="true">#</a> 进程相关</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 启动后台进程</span>
<span class="token function">nohup</span><span class="token punctuation">(</span><span class="token string">&quot;yock&quot;</span><span class="token punctuation">)</span>
<span class="token comment">-- 打印出pid为20的进程列表</span>
table<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span><span class="token function">ps</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">-- 打印出启用命令为yock的进程列表</span>
table<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span><span class="token function">ps</span><span class="token punctuation">(</span><span class="token string">&quot;yock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">-- 不过滤进程列表</span>
<span class="token function">ps</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">-- 显示进程的某些参数，如运行的用户，内存信息，CPU信息，启动时间</span>
<span class="token function">ps</span><span class="token punctuation">(</span><span class="token punctuation">{</span> user <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> mem <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> cpu <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">-- 显示命令为test的进程列表</span>
<span class="token keyword">local</span> procs <span class="token operator">=</span> <span class="token function">pgrep</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">#</span>procs<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">do</span>
    <span class="token function">print</span><span class="token punctuation">(</span>procs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Pid<span class="token punctuation">,</span> procs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
<span class="token keyword">end</span>
<span class="token comment">-- 杀死指定进程，有两种重载，一个模糊匹配命令，一个为PID</span>
<span class="token function">kill</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>
<span class="token function">kill</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="网络相关" tabindex="-1"><a class="header-anchor" href="#网络相关" aria-hidden="true">#</a> 网络相关</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>table<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span><span class="token function">ifconfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">-- 根据端口号查找相应的信息</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;PID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Proto&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;State&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Local&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> _<span class="token punctuation">,</span> info <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span><span class="token function">lsof</span><span class="token punctuation">(</span><span class="token number">58838</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">do</span>
    <span class="token function">print</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>pid<span class="token punctuation">,</span> info<span class="token punctuation">.</span>proto<span class="token punctuation">,</span> info<span class="token punctuation">.</span>state<span class="token punctuation">,</span> info<span class="token punctuation">.</span>Local<span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串处理" tabindex="-1"><a class="header-anchor" href="#字符串处理" aria-hidden="true">#</a> 字符串处理</h2>`,15),r=s("br",null,null,-1),k=s("br",null,null,-1),d=s("br",null,null,-1),v={href:"https://github.com/BurntSushi/ripgrep",target:"_blank",rel:"noopener noreferrer"},m=s("br",null,null,-1),b={href:"https://github.com/benhoyt/goawk",target:"_blank",rel:"noopener noreferrer"},q=s("br",null,null,-1),g={href:"https://github.com/chmln/sd",target:"_blank",rel:"noopener noreferrer"},h=p(`<div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">grep</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    case <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>
    color <span class="token operator">=</span> <span class="token string">&quot;never&quot;</span><span class="token punctuation">,</span>
    pattern <span class="token operator">=</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>
    file <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;awk_test.txt&quot;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">awk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    prog <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;../bin/test.awk&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;../bin/test2.awk&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    file <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;awk_test.txt&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    var <span class="token operator">=</span> <span class="token punctuation">{</span>
        name <span class="token operator">=</span> <span class="token string">&quot;ansurfen&quot;</span><span class="token punctuation">,</span>
        age <span class="token operator">=</span> <span class="token number">20</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> out<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">sed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    old <span class="token operator">=</span> <span class="token string">&quot;(.*)&quot;</span><span class="token punctuation">,</span>
    new <span class="token operator">=</span> <span class="token string">&quot;//$1&quot;</span><span class="token punctuation">,</span>
    file <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;t.txt&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实验性命令" tabindex="-1"><a class="header-anchor" href="#实验性命令" aria-hidden="true">#</a> 实验性命令</h2><blockquote><p>以下命令对平台适配程度很高，因此在目前yock还不稳定的情况下最好不要用于生产环境。</p></blockquote><h4 id="systemctl" tabindex="-1"><a class="header-anchor" href="#systemctl" aria-hidden="true">#</a> systemctl</h4><h4 id="crontab" tabindex="-1"><a class="header-anchor" href="#crontab" aria-hidden="true">#</a> crontab</h4><h4 id="iptables" tabindex="-1"><a class="header-anchor" href="#iptables" aria-hidden="true">#</a> iptables</h4>`,8);function f(w,y){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,s("p",null,[n("为了实现字符串三剑客跨平台，yock内置第三方实现以代替它们。"),r,n(" 原命令|替代"),k,n(" -|:-😐-"),d,n(" grep|"),s("a",v,[n("ripgrep"),t(a)]),m,n(" awk|"),s("a",b,[n("goawk"),t(a)]),q,n(" sed|"),s("a",g,[n("sd"),t(a)])]),h])}const C=e(l,[["render",f],["__file","gnu.html.vue"]]);export{C as default};
