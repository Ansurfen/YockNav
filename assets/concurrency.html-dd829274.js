import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as t}from"./app-aad1477e.js";const p={},e=t(`<p>Yock拥有异步任务转同步任务的能力，以及有栈和无栈协程并发编程的特性。</p><h2 id="信号量" tabindex="-1"><a class="header-anchor" href="#信号量" aria-hidden="true">#</a> 信号量</h2><p>在开始异步编程之前，先引入同步的概念。正常情况下代码是顺序执行的，有时候迫于进程切换的开销，以及多核CPU的普及，多线程编程日益普遍。但是面对异步的任务，在某些场景下又不得不转换成同步处理，例如多线程爬虫都爬完后统一返回，需要从异步转换成同步。yock为用户提供了两个函数notify和wait。正如他们的字面意思，notify发送信号量，wait阻塞等待信号量。如果wait一直等不到信号量，它将永远阻塞下去。为了避免死锁的情况发生，yock也为wait函数提供了timeout参数，这是可选的，如果在规定的时间内无法等到信号量，那将自动结束阻塞。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param sig string</span>
<span class="token comment">---@param timeout? time</span>
<span class="token keyword">function</span> <span class="token function">wait</span><span class="token punctuation">(</span>sig<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span> <span class="token keyword">end</span>

<span class="token comment">---@param ... string|time</span>
<span class="token keyword">function</span> <span class="token function">waits</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token keyword">end</span>

<span class="token comment">---@param sig string</span>
<span class="token keyword">function</span> <span class="token function">notify</span><span class="token punctuation">(</span>sig<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了wait外，yock还提供了等待多个信号量的waits，除了阻塞信号量比较多外，使用起来和wait别无二致。</p><h2 id="coroutine-无栈协程" tabindex="-1"><a class="header-anchor" href="#coroutine-无栈协程" aria-hidden="true">#</a> coroutine (无栈协程)</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">co</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    task1 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token keyword">do</span>
            this<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;I am task 1, executing step &quot;</span> <span class="token operator">..</span> i<span class="token punctuation">)</span>
            coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">end</span>
    <span class="token keyword">end</span><span class="token punctuation">,</span>
    task2 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token keyword">do</span>
            this<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;I am task 2, executing step &quot;</span> <span class="token operator">..</span> i<span class="token punctuation">)</span>
            coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">end</span>
    <span class="token keyword">end</span><span class="token punctuation">,</span>
    task3 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token keyword">do</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;I am task 3, executing step &quot;</span> <span class="token operator">..</span> i<span class="token punctuation">)</span>
            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">5</span> <span class="token keyword">then</span>
                this<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token string">&quot;y&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">end</span>
            coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">end</span>
        this<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span><span class="token punctuation">,</span>
    task4 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token keyword">do</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;I am task 4, executing step &quot;</span> <span class="token operator">..</span> i<span class="token punctuation">)</span>
            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">9</span> <span class="token keyword">then</span>
                this<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">&quot;y&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">end</span>
            coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">end</span>
    <span class="token keyword">end</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像传统lua语言一样，yock封装了一套简单的coroutine协程以适应单线程环境的需要。这个协程需要手动挂起(yield)，所以操作起来比较繁琐，同时单线程的特性也没法充分利用多核CPU的资源。另外，值得注意的是，虽然coroutine是单线程的，但是yock是基于go语言实现的，期间用了协程进行调度，因此运行的CPU核心最少大于2，不支持单核CPU运行。</p><h2 id="goroutine-有栈协程" tabindex="-1"><a class="header-anchor" href="#goroutine-有栈协程" aria-hidden="true">#</a> goroutine (有栈协程)</h2><h4 id="协程与信号量相结合" tabindex="-1"><a class="header-anchor" href="#协程与信号量相结合" aria-hidden="true">#</a> 协程与信号量相结合</h4><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">local</span> idx <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> idx <span class="token operator">~=</span> <span class="token number">5</span> <span class="token keyword">do</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;task 1&quot;</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
        idx <span class="token operator">=</span> idx <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">end</span>
    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;task1 fine&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>

<span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;task 2&quot;</span><span class="token punctuation">)</span>
    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;task2 fine&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>

<span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">&quot;y&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>

<span class="token function">waits</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子我们不难看出，waits阻塞了主线程，三个go函数起了三个异步任务。任务1执行完后会发出<code>x</code>的信号，任务2在执行的过程中阻塞等待<code>x</code>信号的到来，而任务3在执行结束发送<code>y</code>信号。当xy信号都到达时，主线程结束阻塞程序退出。</p><h4 id="嵌套协程" tabindex="-1"><a class="header-anchor" href="#嵌套协程" aria-hidden="true">#</a> 嵌套协程</h4><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">local</span> segs <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span> <span class="token punctuation">}</span>
    <span class="token keyword">local</span> i <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token operator">#</span>segs <span class="token keyword">do</span>
        <span class="token keyword">local</span> seg <span class="token operator">=</span> segs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">local</span> j <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token keyword">do</span>
                <span class="token function">print</span><span class="token punctuation">(</span>seg<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
                time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
                j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">end</span>
            <span class="token function">notify</span><span class="token punctuation">(</span>seg<span class="token punctuation">)</span>
        <span class="token keyword">end</span><span class="token punctuation">)</span>
        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">end</span>
    <span class="token keyword">for</span> _<span class="token punctuation">,</span> seg <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>segs<span class="token punctuation">)</span> <span class="token keyword">do</span>
        <span class="token function">wait</span><span class="token punctuation">(</span>seg<span class="token punctuation">)</span>
    <span class="token keyword">end</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;seg fine&quot;</span><span class="token punctuation">)</span>
    os<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>
time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;time abort&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>yock继承了go语言有栈协程的优势，使得go函数支持嵌套使用。</p>`,15),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","concurrency.html.vue"]]);export{r as default};
