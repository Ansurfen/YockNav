import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as e}from"./app-aad1477e.js";const t={},o=e(`<p>pipe object is designed to simulate the pipe operation of terminal on lua.</p><h2 id="pipe" tabindex="-1"><a class="header-anchor" href="#pipe" aria-hidden="true">#</a> pipe</h2><ul><li>type integer</li><li>payload any</li><li>clone fun(self: pipe): pipe</li></ul><h2 id="file" tabindex="-1"><a class="header-anchor" href="#file" aria-hidden="true">#</a> file()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@operator add(pipe):pipe</span>
<span class="token comment">---@operator sub(pipe):pipe</span>
<span class="token comment">---@vararg string</span>
<span class="token comment">---@return pipe</span>
<span class="token keyword">function</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>file saves file descriptor based-on filename and creates empty file when given file not exist.</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;1.txt&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- single file stream</span>
<span class="token keyword">local</span> b <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;2.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3.txt&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- multiple file stream</span>

 <span class="token operator">#</span> operator reload to reset file stream
<span class="token keyword">local</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token comment">-- converge file stream to handle at the same time</span>
<span class="token keyword">local</span> d <span class="token operator">=</span> c <span class="token operator">-</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;2.txt&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- remove file stream based-on the second parameter</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stream" tabindex="-1"><a class="header-anchor" href="#stream" aria-hidden="true">#</a> stream()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param str string</span>
<span class="token comment">---@return pipe</span>
<span class="token keyword">function</span> <span class="token function">stream</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>stream converts string into pipe object, which allow you use operator to handle file stream, just like the pipe operation of terminal.</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token function">stream</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span> <span class="token operator">#</span> create pipe object
_ <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> a <span class="token comment">-- write with truncation to test.txt</span>

_ <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> a <span class="token comment">-- write with append to test.txt</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),l=[o];function p(i,c){return s(),a("div",null,l)}const d=n(t,[["render",p],["__file","pipe.html.vue"]]);export{d as default};
