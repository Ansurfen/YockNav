import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as t}from"./app-aad1477e.js";const e={},o=t(`<h2 id="job" tabindex="-1"><a class="header-anchor" href="#job" aria-hidden="true">#</a> job()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param dir string</span>
<span class="token comment">---@param callback fun(path: string, info: fileinfo)</span>
<span class="token comment">---@return nil, err</span>
<span class="token comment">---@param name string</span>
<span class="token comment">---@param callback fun(ctx: context)</span>
<span class="token keyword">function</span> <span class="token function">job</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>job is the smallest component of a task, a task can consist of one or more jobs.<br> It is not difficult to see from the function signature that each job is a unit<br> whose name is bound to the callback function. If a user defines a job with the same<br> name in the same file, Yock will throw an error, so each job name must be unique.</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token operator">#</span> main<span class="token punctuation">.</span>lua

<span class="token function">job</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
     ctx<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>

<span class="token operator">#</span> use \`yock run main<span class="token punctuation">.</span>lua test\` to run test task <span class="token keyword">for</span> the above code<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jobs" tabindex="-1"><a class="header-anchor" href="#jobs" aria-hidden="true">#</a> jobs()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param name string</span>
<span class="token comment">---@vararg string</span>
<span class="token keyword">function</span> <span class="token function">jobs</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>jobs composes multiple jobs to form a task and share the namespace with the job. This means that if jobs and job have the same name, yock will also throw an error directly.</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token operator">#</span> main<span class="token punctuation">.</span>lua
<span class="token function">job</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;start test...&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>

<span class="token function">job</span><span class="token punctuation">(</span><span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;start build...&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>

<span class="token function">job</span><span class="token punctuation">(</span><span class="token string">&quot;deploy&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;start deploy...&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>

<span class="token function">jobs</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;deploy&quot;</span><span class="token punctuation">)</span>
<span class="token operator">#</span> just like scheduling job<span class="token punctuation">,</span> use \`yock run main<span class="token punctuation">.</span>lua all\` to run all task one by one<span class="token punctuation">.</span>
<span class="token operator">#</span> <span class="token keyword">if</span> you want to run multiple task with cover at the same time<span class="token punctuation">,</span> it&#39;s also supported
<span class="token operator">#</span> <span class="token keyword">and</span> use the form of \`yock run main<span class="token punctuation">.</span>lua all deploy\` to make it<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),p=[o];function l(i,c){return s(),a("div",null,p)}const d=n(e,[["render",l],["__file","job.html.vue"]]);export{d as default};
