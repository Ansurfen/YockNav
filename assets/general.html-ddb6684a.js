import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,d as o}from"./app-62237bf4.js";const s={},t=o(`<p>option can reset yock configuration (yock.yaml) at runtime, and you can think it&#39;s an local or temporary environment. General said, most setting is effective. You also can add sync field to synchronize configuration, but it&#39;s not recommended and possible to destroy global.</p><h2 id="option" tabindex="-1"><a class="header-anchor" href="#option" aria-hidden="true">#</a> Option</h2><ul><li>strict?, boolean, catches error and kills program when error occurs.</li><li>sync?, boolean, synchronize to configuration (yock.yaml), and it&#39;s not recommended.</li></ul><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">option</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    strict <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>
    sync <span class="token operator">=</span> <span class="token keyword">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="config-file-yock-yaml" tabindex="-1"><a class="header-anchor" href="#config-file-yock-yaml" aria-hidden="true">#</a> Config file (yock.yaml)</h2>`,6),i=[t];function c(r,l){return a(),e("div",null,i)}const u=n(s,[["render",c],["__file","general.html.vue"]]);export{u as default};
