import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as t}from"./app-aad1477e.js";const e={},o=t(`<h2 id="context" tabindex="-1"><a class="header-anchor" href="#context" aria-hidden="true">#</a> context</h2><ul><li>platform platform</li><li>args string[]</li><li>task string</li><li>flags? table&lt;string, any&gt;</li></ul><h2 id="ec" tabindex="-1"><a class="header-anchor" href="#ec" aria-hidden="true">#</a> ec</h2><ul><li>integer</li><li>0 # abort all peer jobs (default)</li><li>1 # continue to run peer jobs</li><li>2 # continue to run peer jobs with inherit</li></ul><h2 id="context-exit" tabindex="-1"><a class="header-anchor" href="#context-exit" aria-hidden="true">#</a> context.exit()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param code? ec</span>
<span class="token keyword">function</span> context<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>exit aborts running for the context, and decides whether to continue the next according to code&#39;s value. Its scope only is limited to task, not impacting other tasks.</p><h2 id="context-assert" tabindex="-1"><a class="header-anchor" href="#context-assert" aria-hidden="true">#</a> context.assert()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@generic T</span>
<span class="token comment">---@param ok? T</span>
<span class="token comment">---@param msg? string</span>
<span class="token keyword">function</span> context<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>ok<span class="token punctuation">,</span> msg<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><h2 id="context-throw" tabindex="-1"><a class="header-anchor" href="#context-throw" aria-hidden="true">#</a> context.throw()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param error string</span>
<span class="token keyword">function</span> context<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>throw uses os.exit to abort entire program with force, and prints the info of error.</p><h2 id="context-yield" tabindex="-1"><a class="header-anchor" href="#context-yield" aria-hidden="true">#</a> context.yield()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param timeout? integer</span>
<span class="token keyword">function</span> context<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><h2 id="context-resume" tabindex="-1"><a class="header-anchor" href="#context-resume" aria-hidden="true">#</a> context.resume()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@vararg string</span>
<span class="token keyword">function</span> context<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><h2 id="context-put" tabindex="-1"><a class="header-anchor" href="#context-put" aria-hidden="true">#</a> context.put()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token comment">---@param v any</span>
<span class="token keyword">function</span> context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>put sets keyed value in yock&#39;s memory database, which can be taken by <code>context.get()</code> and the lifetime is in total program, but any context.</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token operator">#</span> assumes yock is running <span class="token keyword">in</span> windows
<span class="token function">job</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="context-get" tabindex="-1"><a class="header-anchor" href="#context-get" aria-hidden="true">#</a> context.get()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token comment">---@return any</span>
<span class="token keyword">function</span> context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>get takes value from yock&#39;s memory database</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token operator">#</span> assumes yock is running <span class="token keyword">in</span> windows
<span class="token function">job</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="context-set-os" tabindex="-1"><a class="header-anchor" href="#context-set-os" aria-hidden="true">#</a> context.set_os()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param os string</span>
<span class="token keyword">function</span> context<span class="token punctuation">.</span><span class="token function">set_os</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>set_os sets the os of platform field in context, which returns corresponding platform information.</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token operator">#</span> assumes yock is running <span class="token keyword">in</span> windows
<span class="token function">job</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>platform<span class="token punctuation">:</span><span class="token function">Script</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">-- .bat</span>
    ctx<span class="token punctuation">.</span><span class="token function">set_os</span><span class="token punctuation">(</span><span class="token string">&quot;linux&quot;</span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>platform<span class="token punctuation">:</span><span class="token function">Script</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">-- .sh</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,47),c=[o];function i(p,l){return s(),a("div",null,c)}const d=n(e,[["render",i],["__file","context.html.vue"]]);export{d as default};
