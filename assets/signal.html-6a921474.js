import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as e}from"./app-0d28c3d4.js";const t={},o=e(`<h2 id="wait" tabindex="-1"><a class="header-anchor" href="#wait" aria-hidden="true">#</a> wait()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param sig string</span>
<span class="token comment">---@param timeout? time</span>
<span class="token keyword">function</span> <span class="token function">wait</span><span class="token punctuation">(</span>sig<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>wait blocks self and waits for sig. If lack signal, it&#39;ll block for ever. If not, you can set deadline to unblock when timeout.</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token operator">#</span> waiting <span class="token keyword">for</span> three second
<span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
     time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
     <span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>
<span class="token function">wait</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span>
<span class="token operator">#</span> <span class="token keyword">do</span> something

<span class="token operator">#</span> the following code will block <span class="token keyword">for</span> ever <span class="token keyword">if</span> don&#39;t wait \`blocked\` signal<span class="token punctuation">.</span>
<span class="token function">wait</span><span class="token punctuation">(</span><span class="token string">&quot;blocked&quot;</span><span class="token punctuation">)</span>

<span class="token operator">#</span> sets deadline to unblock<span class="token punctuation">,</span> <span class="token keyword">and</span> it does <span class="token keyword">not</span> mean signal arrives <span class="token keyword">and</span> is received<span class="token punctuation">.</span>
<span class="token function">wait</span><span class="token punctuation">(</span><span class="token string">&quot;blocked&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="waits" tabindex="-1"><a class="header-anchor" href="#waits" aria-hidden="true">#</a> waits()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param ... string|time</span>
<span class="token keyword">function</span> <span class="token function">waits</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>waits just like wait, blocks self and waits for sig supporting for setting deadline to unblock when timeout. The difference is waits can collect a variable number of signals than wait.</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token operator">#</span> just like wait when uses
<span class="token function">waits</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="notify" tabindex="-1"><a class="header-anchor" href="#notify" aria-hidden="true">#</a> notify()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param sig string</span>
<span class="token keyword">function</span> <span class="token function">notify</span><span class="token punctuation">(</span>sig<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>notify sends sig to signal stream, which can unblock wait or waits.</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token operator">#</span> waiting <span class="token keyword">for</span> three second util signal \`x\` was sent <span class="token keyword">and</span> received
<span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
     time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
     <span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>
<span class="token function">wait</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),i=[o];function l(p,c){return s(),a("div",null,i)}const r=n(t,[["render",l],["__file","signal.html.vue"]]);export{r as default};
