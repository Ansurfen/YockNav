import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as e}from"./app-aad1477e.js";const t={},o=e(`<h2 id="json-encode" tabindex="-1"><a class="header-anchor" href="#json-encode" aria-hidden="true">#</a> json.encode()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param v any</span>
<span class="token comment">---@vararg string</span>
<span class="token comment">---@return string</span>
<span class="token keyword">function</span> json<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>encode marshals table into json string</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">-- input: [1,2,3]</span>

<span class="token function">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> c <span class="token operator">=</span> <span class="token string">&quot;d&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">-- input: {&quot;a&quot;:10,&quot;b&quot;:{&quot;c&quot;:&quot;d&quot;}}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="json-decode" tabindex="-1"><a class="header-anchor" href="#json-decode" aria-hidden="true">#</a> json.decode()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param str string</span>
<span class="token comment">---@return table</span>
<span class="token keyword">function</span> json<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>decode unmarshals json string to table</p><h2 id="json-create" tabindex="-1"><a class="header-anchor" href="#json-create" aria-hidden="true">#</a> json.create()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param file string</span>
<span class="token comment">---@param str? string</span>
<span class="token comment">---@return json_object</span>
<span class="token keyword">function</span> json<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>create opens json file to be specified and returns json_object and create json file when it don&#39;t exist. The second parameter indicates content to write file when create.</p><h2 id="json-open" tabindex="-1"><a class="header-anchor" href="#json-open" aria-hidden="true">#</a> json.open()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param file string</span>
<span class="token comment">---@return json_object</span>
<span class="token keyword">function</span> json<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>open must opens an existed file. if not, it&#39;ll panic.</p><h2 id="json-from-str" tabindex="-1"><a class="header-anchor" href="#json-from-str" aria-hidden="true">#</a> json.from_str()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param str string</span>
<span class="token comment">---@return json_object</span>
<span class="token keyword">function</span> json<span class="token punctuation">.</span><span class="token function">from_str</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>unmarshals json string to object and returns</p><h2 id="json-object" tabindex="-1"><a class="header-anchor" href="#json-object" aria-hidden="true">#</a> json_object</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@class json_object</span>
<span class="token comment">---@field buf table</span>
<span class="token comment">---@field file string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="json-object-getbool" tabindex="-1"><a class="header-anchor" href="#json-object-getbool" aria-hidden="true">#</a> json_object:getbool()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token comment">---@return boolean</span>
<span class="token keyword">function</span> json_object<span class="token punctuation">:</span><span class="token function">getbool</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="json-object-getnumber" tabindex="-1"><a class="header-anchor" href="#json-object-getnumber" aria-hidden="true">#</a> json_object:getnumber()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token comment">---@return number</span>
<span class="token keyword">function</span> json_object<span class="token punctuation">:</span><span class="token function">getnumber</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="json-object-getstr" tabindex="-1"><a class="header-anchor" href="#json-object-getstr" aria-hidden="true">#</a> json_object:getstr()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token comment">---@return string</span>
<span class="token keyword">function</span> json_object<span class="token punctuation">:</span><span class="token function">getstr</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="json-object-gettable" tabindex="-1"><a class="header-anchor" href="#json-object-gettable" aria-hidden="true">#</a> json_object:gettable()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token comment">---@return table</span>
<span class="token keyword">function</span> json_object<span class="token punctuation">:</span><span class="token function">gettable</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="json-object-get" tabindex="-1"><a class="header-anchor" href="#json-object-get" aria-hidden="true">#</a> json_object:get()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token comment">---@return any</span>
<span class="token keyword">function</span> json_object<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>get could visit value by json path.</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> jf <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">from_str</span><span class="token punctuation">(</span><span class="token string">[[{ &quot;a&quot; = { &quot;b&quot; = 10 } }]]</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>jf<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;a.b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">-- input: 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="json-object-rawget" tabindex="-1"><a class="header-anchor" href="#json-object-rawget" aria-hidden="true">#</a> json_object:rawget()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token comment">---@return any</span>
<span class="token keyword">function</span> json_object<span class="token punctuation">:</span><span class="token function">rawget</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>rawget returns value according to key. It&#39;s different with <code>get</code>, and not any handling.</p><h2 id="json-object-set" tabindex="-1"><a class="header-anchor" href="#json-object-set" aria-hidden="true">#</a> json_object:set()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token comment">---@param v any</span>
<span class="token keyword">function</span> json_object<span class="token punctuation">:</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>set could set value by json path.</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> jf <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">from_str</span><span class="token punctuation">(</span><span class="token string">[[{ &quot;a&quot;: { &quot;b&quot;: 10 } }]]</span><span class="token punctuation">)</span>
jf<span class="token punctuation">:</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;a.b&quot;</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="json-object-rawset" tabindex="-1"><a class="header-anchor" href="#json-object-rawset" aria-hidden="true">#</a> json_object:rawset()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token comment">---@param v any</span>
<span class="token keyword">function</span> json_object<span class="token punctuation">:</span><span class="token function">rawset</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>rawget sets value according to key. It&#39;s different with <code>set</code>, and not any handling.</p><h2 id="json-object-string" tabindex="-1"><a class="header-anchor" href="#json-object-string" aria-hidden="true">#</a> json_object:string()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@return string</span>
<span class="token keyword">function</span> json_object<span class="token punctuation">:</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>string returns json string by self.</p><h2 id="json-object-save" tabindex="-1"><a class="header-anchor" href="#json-object-save" aria-hidden="true">#</a> json_object:save()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param pretty? boolean</span>
<span class="token keyword">function</span> json_object<span class="token punctuation">:</span><span class="token function">save</span><span class="token punctuation">(</span>pretty<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>save persists json into file to be specified. In general, it&#39;s the same with calling <code>json.open</code> or <code>json.create</code> to indicate. You also could reset file field to change it. Pretty is optional, and it&#39;s false in default and will formats json string when be set true.</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> jf <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test.json&quot;</span><span class="token punctuation">)</span>
jf<span class="token punctuation">:</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span>
<span class="token comment">-- to begin</span>
<span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span>

<span class="token comment">-- nowadays</span>
<span class="token punctuation">{</span>
    <span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;b&quot;</span><span class="token punctuation">:</span> <span class="token number">10</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,78),l=[o];function i(c,p){return s(),a("div",null,l)}const r=n(t,[["render",i],["__file","json.html.vue"]]);export{r as default};
