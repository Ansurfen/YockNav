import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as e}from"./app-62237bf4.js";const l={},i=e(`<h2 id="pwd" tabindex="-1"><a class="header-anchor" href="#pwd" aria-hidden="true">#</a> pwd()</h2><ul><li>原型</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@return string, err</span>
<span class="token keyword">function</span> <span class="token function">pwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>介绍</li></ul><p>pwd 返回当前程序的工作目录。</p><h2 id="whereis" tabindex="-1"><a class="header-anchor" href="#whereis" aria-hidden="true">#</a> whereis()</h2><ul><li>原型</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token comment">---@return string, err</span>
<span class="token keyword">function</span> <span class="token function">whereis</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>介绍</li></ul><p>whereis 返回指定环境变量所在的绝对路径。</p><h2 id="alias" tabindex="-1"><a class="header-anchor" href="#alias" aria-hidden="true">#</a> alias()</h2><ul><li>原型</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token comment">---@param v string</span>
<span class="token keyword">function</span> <span class="token function">alias</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>介绍</li></ul><p>alias 为 k 创建一个别名 v，它并不是直接调用终端或者shell上的 alias 命令，而是保存它在程序的内存当中去映射命令，当 <code>sh</code> 函数调用的时候。</p><ul><li>示例</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">&quot;CC&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;go&quot;</span><span class="token punctuation">)</span>
<span class="token function">sh</span><span class="token punctuation">(</span><span class="token string">&quot;$CC version&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unalias" tabindex="-1"><a class="header-anchor" href="#unalias" aria-hidden="true">#</a> unalias()</h2><ul><li>原型</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@vararg string</span>
<span class="token keyword">function</span> <span class="token function">unalias</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>介绍</li></ul><p>unalias 移除 alias 的映射关系。</p><ul><li>示例</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">&quot;CC&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;go&quot;</span><span class="token punctuation">)</span>
<span class="token function">unalias</span><span class="token punctuation">(</span><span class="token string">&quot;CC&quot;</span><span class="token punctuation">)</span>
<span class="token function">sh</span><span class="token punctuation">(</span><span class="token string">&quot;$CC version&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="export" tabindex="-1"><a class="header-anchor" href="#export" aria-hidden="true">#</a> export()</h2><ul><li>原型</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token comment">---@param v string</span>
<span class="token comment">---@return err</span>
<span class="token keyword">function</span> <span class="token function">export</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>介绍</li></ul><p>export 永久地设置用户环境变量。如果你只想要设置临时或者局部变量，看 <code>exportl</code> 函数。</p><ul><li>示例</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 几乎无害</span>
<span class="token function">export</span><span class="token punctuation">(</span><span class="token string">&quot;PATH:/bin/yock&quot;</span><span class="token punctuation">)</span>
<span class="token comment">-- 当值不存在的时候，将追加写入PATH中，它能够在 windows 上起作用</span>
<span class="token comment">-- 这意味着不需要使用 Path 替代 PATH</span>

<span class="token comment">-- 请保持谨慎!!!</span>
<span class="token function">export</span><span class="token punctuation">(</span><span class="token string">&quot;PATH&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/bin/yock&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- 它将重写整个 PATH 的值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unset" tabindex="-1"><a class="header-anchor" href="#unset" aria-hidden="true">#</a> unset()</h2><ul><li>原型</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token keyword">function</span> <span class="token function">unset</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>介绍</li></ul><p>unset removes specified environment variable for ever. If you only want to set temporary, or local variable, see the <code>unsetl</code> function. Just like export, the unset function supports entire delete and deletes one of values for specified key.</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token operator">#</span> entire deletes
<span class="token function">unset</span><span class="token punctuation">(</span><span class="token string">&quot;PATH&quot;</span><span class="token punctuation">)</span>

<span class="token operator">#</span> deletes one of values <span class="token keyword">for</span> specified key
<span class="token function">unset</span><span class="token punctuation">(</span><span class="token string">&quot;PATH:/bin/yock&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exportl" tabindex="-1"><a class="header-anchor" href="#exportl" aria-hidden="true">#</a> exportl()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token comment">---@param v string</span>
<span class="token comment">---@return err</span>
<span class="token keyword">function</span> <span class="token function">exportl</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>exportl set temporary or local environment variable, and less like the <code>export</code> function it fails to write by append, and only supports to overwrite entire key, which meant you may need two step to complete append operation.</p><h2 id="unsetl" tabindex="-1"><a class="header-anchor" href="#unsetl" aria-hidden="true">#</a> unsetl()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k string</span>
<span class="token comment">---@return err</span>
<span class="token keyword">function</span> <span class="token function">unsetl</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>unsetl removes temporary or local environment variable, and less like the <code>export</code> function it fails to removes one of values, and only supports to remove entire key, which meant you may need two step to complete append operation.</p><h2 id="environ" tabindex="-1"><a class="header-anchor" href="#environ" aria-hidden="true">#</a> environ()</h2><ul><li>原型</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@return table&lt;string, string&gt;</span>
<span class="token keyword">function</span> <span class="token function">environ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">end</span>

<span class="token comment">---@param k string</span>
<span class="token comment">---@return string[]</span>
<span class="token keyword">function</span> <span class="token function">environ</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>介绍</li></ul><p>重载 1</p><p>environ 返回所有环境变量。</p><p>重载 2</p><p>environ 返回环境变量 k 的值，如果值包含了多个值的情况 （例如，PATH），那它将会被分割成字符串数组返回。</p>`,56),t=[i];function o(p,c){return s(),a("div",null,t)}const d=n(l,[["render",o],["__file","workspace.html.vue"]]);export{d as default};
