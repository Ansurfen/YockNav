import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as e,d as a}from"./app-aad1477e.js";const s={},i=a(`<p>ffi allows yock open and call dynamic library.</p><h2 id="ffilib" tabindex="-1"><a class="header-anchor" href="#ffilib" aria-hidden="true">#</a> ffiLib</h2><ul><li>lib table</li></ul><h2 id="ffi-library" tabindex="-1"><a class="header-anchor" href="#ffi-library" aria-hidden="true">#</a> ffi.library()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param lib string</span>
<span class="token comment">---@param funcs table</span>
<span class="token keyword">function</span> ffi<span class="token punctuation">.</span><span class="token function">library</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span> funcs<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>library declares function prototype (arguments + return value type) and creates its at running. Then, you can call its as function through ffi.lib.&#39;lib_name&#39;.&#39;function_name&#39; format.</p><ul><li>Type Mapping</li></ul><table><thead><tr><th style="text-align:center;">Lua</th><th style="text-align:right;">C</th></tr></thead><tbody><tr><td style="text-align:center;"></td><td style="text-align:right;">void</td></tr><tr><td style="text-align:center;">integer</td><td style="text-align:right;">uint8</td></tr><tr><td style="text-align:center;">integer</td><td style="text-align:right;">int8</td></tr><tr><td style="text-align:center;">integer</td><td style="text-align:right;">int8</td></tr><tr><td style="text-align:center;">integer</td><td style="text-align:right;">uint16</td></tr><tr><td style="text-align:center;">integer</td><td style="text-align:right;">int16</td></tr><tr><td style="text-align:center;">integer</td><td style="text-align:right;">uint32</td></tr><tr><td style="text-align:center;">integer</td><td style="text-align:right;">int32</td></tr><tr><td style="text-align:center;">integer</td><td style="text-align:right;">uint64</td></tr><tr><td style="text-align:center;">integer</td><td style="text-align:right;">int64</td></tr><tr><td style="text-align:center;">integer</td><td style="text-align:right;">int (int32)</td></tr><tr><td style="text-align:center;">integer</td><td style="text-align:right;">long (int64)</td></tr><tr><td style="text-align:center;">number</td><td style="text-align:right;">float</td></tr><tr><td style="text-align:center;">number</td><td style="text-align:right;">double</td></tr><tr><td style="text-align:center;">boolean</td><td style="text-align:right;">bool</td></tr><tr><td style="text-align:center;">string</td><td style="text-align:right;">str (ptr type alias)</td></tr><tr><td style="text-align:center;">userdata</td><td style="text-align:right;">ptr # pointer type</td></tr></tbody></table><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- declares function prototype, and it&#39;s worth noting filename extension isn&#39;t required,</span>
<span class="token comment">-- and yock will refer extension&#39;s name to add it automatically</span>
<span class="token comment">-- according to platform (windows: .dll, linux: .so, darwin: .dylib).</span>
<span class="token comment">-- Of course, obvious to add it is allowed, but not recommended because it&#39;s considered</span>
<span class="token comment">-- difficult to cross platform.</span>
ffi<span class="token punctuation">.</span><span class="token function">library</span><span class="token punctuation">(</span><span class="token string">&quot;./lib/mylib&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
     hello <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;void&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">&quot;str&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">-- calls function, no matter how tortuous the library path is, and yock only extracts filename</span>
<span class="token comment">-- in the end of path, meanwhile to split filename extension (.dll, .so, .dylib) to ensure cross platform.</span>
ffi<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>mylib<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">&quot;yock&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),l=[i];function r(o,d){return n(),e("div",null,l)}const u=t(s,[["render",r],["__file","ffi.html.vue"]]);export{u as default};
