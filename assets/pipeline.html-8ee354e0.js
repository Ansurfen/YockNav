import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as t}from"./app-62237bf4.js";const e={},o=t(`<p>Yock没有直接提供Pipeline相关的规范，但是提供了能够搭建Pipeline的相关功能，这也使得yock在调度上更加灵活。</p><h2 id="job-task" tabindex="-1"><a class="header-anchor" href="#job-task" aria-hidden="true">#</a> Job &amp; Task</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param name string</span>
<span class="token comment">---@param callback fun(ctx: context)</span>
<span class="token keyword">function</span> <span class="token function">job</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token keyword">end</span>

<span class="token comment">---@param name string</span>
<span class="token comment">---@vararg string</span>
<span class="token keyword">function</span> <span class="token function">jobs</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Job: Task的最小组成单元，一个Task可由一个或者多个job组成。从函数签名不难看出，每个job都是一个名称与回调函数相绑定的单元。如果用户在同一份文件中定义同名的job，那yock将会抛出错误，因此每个job名称必须唯一。<br> Jobs: 编排多个job组成一个Task，与job共享命名空间。这意味着，要是jobs和job出现同名的情况，yock也会直接抛出错误。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">--- main.lua</span>
<span class="token function">job</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;start test...&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>

<span class="token function">job</span><span class="token punctuation">(</span><span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;start build...&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>

<span class="token function">job</span><span class="token punctuation">(</span><span class="token string">&quot;deploy&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;start deploy...&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>

<span class="token function">jobs</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;deploy&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>鉴于上文的介绍，我们不难看出这份代码中存在的task(Task由一个或者多个job组成):</p><table><thead><tr><th style="text-align:center;">Tasks</th><th style="text-align:center;">Jobs</th></tr></thead><tbody><tr><td style="text-align:center;">test</td><td style="text-align:center;">test</td></tr><tr><td style="text-align:center;">build</td><td style="text-align:center;">build</td></tr><tr><td style="text-align:center;">depoly</td><td style="text-align:center;">depoly</td></tr><tr><td style="text-align:center;">all</td><td style="text-align:center;">test, build, depoly</td></tr></tbody></table><p>要分task调度他们相当容易，只需要在运行的文件后面加上指定的任务名即可。例如运行all任务，<code>yock run main.lua all</code>。同时运行多个任务也是支持的, <code>yock run main.lua all depoly</code>。每个task之间都是协程异步执行的，而task内的job则是按照顺序依次执行。</p><h2 id="context" tabindex="-1"><a class="header-anchor" href="#context" aria-hidden="true">#</a> Context</h2><p>根据上文的介绍，除了对Job有一定了解外，相信你一定很好奇job回调函数中传递的context类型的参数是做什么的。顾名思义，它是一个上下文类型，操作着task流程的生命周期。</p><p>想象一个这样的场景，在调度<code>all</code>任务期间，如果<code>test</code>计划失败，那是否要继续<code>build</code>的运行呢？这就会产生一个分支，而要控制这一切在用户层面除了引入全局变量外是没办法的。因为yock只是提供了一个回调函数，没有提供编排回调函数的能力。因此，ctx变量应运而生。如果你想要终止整个task那只在回调函数结尾处加上<code>ctx.exit(0)</code>，他将终止本次task的执行。注意task之间是协程异步调度的，因此不会影响整个程序的正常调度，如果你想要结束整个程序只需<code>os.exit()</code>。言归正传，如果你不想结束调度，那可以给exit传递1，他将会继续执行本次task的下一个job。</p>`,11),c=[o];function p(l,i){return s(),a("div",null,c)}const r=n(e,[["render",p],["__file","pipeline.html.vue"]]);export{r as default};
