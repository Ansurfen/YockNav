import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as s,d as t}from"./app-aad1477e.js";const a={},i=t(`<h2 id="mock" tabindex="-1"><a class="header-anchor" href="#mock" aria-hidden="true">#</a> mock</h2><ul><li>new fun(): mock_server # returns mock server object</li><li>request fun(method: string, url: string, body: string): httpRequest # returns a new request</li></ul><h2 id="mock-context" tabindex="-1"><a class="header-anchor" href="#mock-context" aria-hidden="true">#</a> mock_context</h2><ul><li>Writer httpResponseWriter # an abstract to response will be sent to client</li><li>Request httpRequest # saves request information from client</li><li>Param fun(self: mock_context, key: string): string # returns the value of the URL param.</li><li>Query fun(self: mock_context, key: string): string # returns the keyed url query value if it exists, otherwise it returns an empty string</li><li>PostForm fun(self: mock_context, key: string): string # returns the specified key from a POST urlencoded form or multipart form</li><li>Bind fun(self: mock_context, obj: table): err # checks the Method and Content-Type to select a binding engine automatically,</li><li>String fun(self: mock_context, code: integer, format: string, ...) # writes the given string into the response body.</li><li>JSON fun(self: mock_context, code: integer, obj: table) # serializes the given struct as JSON into the response body. It also sets the Content-Type as &quot;application/json&quot;.</li><li>File fun(self: mock_context, code: integer, dir: string) # writes the specified file into the body stream in an efficient way.</li></ul><h2 id="mock-handle" tabindex="-1"><a class="header-anchor" href="#mock-handle" aria-hidden="true">#</a> mock_handle</h2><ul><li>fun(ctx: mock_context)</li></ul><h2 id="mock-server-ginengine" tabindex="-1"><a class="header-anchor" href="#mock-server-ginengine" aria-hidden="true">#</a> mock_server: ginEngine</h2><ul><li>engine ginEngine</li><li>run fun(self: mock_server, port: integer): err # runs service on specified port</li><li>get fun(self: mock_server, pattern: string, handle: mock_handle) # binds pattern and handle, and will be called when the http GET request arrived by client</li><li>post fun(self: mock_server, pattern: string, handle: mock_handle) # binds pattern and handle, and will be called when the http POST request arrived by client</li></ul><h2 id="proxy" tabindex="-1"><a class="header-anchor" href="#proxy" aria-hidden="true">#</a> proxy()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param writer httpResponseWriter</span>
<span class="token comment">---@param request httpRequest</span>
<span class="token keyword">function</span> <span class="token function">proxy</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> request<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>proxy sends request and writes to writer</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">--assume you use mock and try to proxy request handle. </span>
<span class="token comment">--\`NOTE\`: it&#39;ll copy and return automatically when proxy finished. </span>
<span class="token keyword">local</span> s <span class="token operator">=</span> mock<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
s<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>      
    <span class="token function">proxy</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> mock<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:8080&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),o=[i];function l(r,c){return e(),s("div",null,o)}const d=n(a,[["render",l],["__file","mock.html.vue"]]);export{d as default};
