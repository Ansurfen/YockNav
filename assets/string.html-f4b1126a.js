import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as l,e as s,f as n,b as e,d as a}from"./app-62237bf4.js";const c={},u=a(`<h2 id="grep-opt" tabindex="-1"><a class="header-anchor" href="#grep-opt" aria-hidden="true">#</a> grep_opt</h2><ul><li>case? boolean, 决定是否忽略大小写</li><li>color? string, 设置输出的颜色</li><li>pattern string, 指明匹配的模式</li><li>file? string[], 从文件中搜索匹配的结果，它的优先级高于 str 字段，者意味着 str 将失效当设置 file 字段。</li><li>str? string[], 从字符串数组中搜索匹配的结果。当 file 字段设置，它将失效，且不支持带换行符的字符串。</li></ul><h2 id="grep" tabindex="-1"><a class="header-anchor" href="#grep" aria-hidden="true">#</a> grep()</h2><ul><li>原型</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param opt grep_opt</span>
<span class="token comment">---@return string, err</span>
<span class="token keyword">function</span> <span class="token function">grep</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>介绍</li></ul>`,6),r={href:"https://github.com/BurntSushi/ripgrep",target:"_blank",rel:"noopener noreferrer"},d=a(`<ul><li><p>选项:</p><ul><li>opt, <a href="#grep-opt">grep_opt</a></li></ul></li><li><p>示例</p></li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 根据字符串搜索</span>
<span class="token keyword">local</span> res<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">grep</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    pattern <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span>
    str <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;abcd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bcd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abbc&quot;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">yassert</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
table<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">-- 搜索文件</span>
<span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;./test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;get\\n get abc\\n getGeT\\nGET&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">local</span> res<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">grep</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    case <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>
    color <span class="token operator">=</span> <span class="token string">&quot;never&quot;</span><span class="token punctuation">,</span>
    pattern <span class="token operator">=</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>
    file <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;./test.txt&quot;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">yassert</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="awk-opt" tabindex="-1"><a class="header-anchor" href="#awk-opt" aria-hidden="true">#</a> awk_opt</h2><ul><li>prog string|string[] # 指明一个或多个规则去提取字符串。 <code>注意</code>: 单规则 (string) 只支持显式写入 prog 字符串, 而多规则 (string[]) 只支持从 .awk 文件中载入。</li><li>var? table&lt;string, string|number|integer&gt; # 定义键值变量，它能够在 prog 中利用 key 使用。</li><li>file? string[] # extracts matched results from files and its priority is more than str field, which means str field will be unavailable when set file field</li><li>str? string[] # extracts matched results from string array and is unavailable when set file field, no supporting string with line break (&#39;\\n&#39;)</li></ul><h2 id="awk" tabindex="-1"><a class="header-anchor" href="#awk" aria-hidden="true">#</a> awk()</h2><ul><li>原型</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param opt awk_opt</span>
<span class="token comment">---@return string, err</span>
<span class="token keyword">function</span> <span class="token function">awk</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>介绍</li></ul>`,8),k={href:"https://github.com/benhoyt/goawk",target:"_blank",rel:"noopener noreferrer"},v=a(`<ul><li><p>选项</p><ul><li>opt, <a href="#awk-opt">awk_opt</a></li></ul></li><li><p>示例</p></li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- extracts from string</span>
<span class="token keyword">local</span> new<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">awk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    prog <span class="token operator">=</span> <span class="token string">&quot;{ print $1 + $3 }&quot;</span><span class="token punctuation">,</span>
    str <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;1 2 3&quot;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">yassert</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
table<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>new<span class="token punctuation">,</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">-- extracts and tests to define variable</span>
<span class="token keyword">local</span> new<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">awk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    prog <span class="token operator">=</span> <span class="token string">&quot;{ print $1, name }&quot;</span><span class="token punctuation">,</span>
    str <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;&#39;Hello World&#39;&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    var <span class="token operator">=</span> <span class="token punctuation">{</span>
        name <span class="token operator">=</span> <span class="token string">&quot;yock&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">yassert</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
table<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>new<span class="token punctuation">,</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">-- extracts based-on rule from prog files</span>
<span class="token keyword">local</span> res<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">awk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    prog <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;./rule.awk&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;./rule2.awk&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    file <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;./test.txt&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    var <span class="token operator">=</span> <span class="token punctuation">{</span>
        name <span class="token operator">=</span> <span class="token string">&quot;yock&quot;</span><span class="token punctuation">,</span>
        age <span class="token operator">=</span> <span class="token number">20</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">yassert</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sed-opt" tabindex="-1"><a class="header-anchor" href="#sed-opt" aria-hidden="true">#</a> sed_opt</h2><ul><li>old string # old string to be replaced</li><li>new string # new string that replace old string</li><li>file? string[] # replaces matched results from files and its priority is more than str field, which means str field will be unavailable when set file field</li><li>str? string[] # replaces matched results from string array and is unavailable when set file field, no supporting string with line break (&#39;\\n&#39;)</li></ul><h2 id="sed" tabindex="-1"><a class="header-anchor" href="#sed" aria-hidden="true">#</a> sed()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param opt sed_opt</span>
<span class="token comment">---@return string, err</span>
<span class="token keyword">function</span> <span class="token function">sed</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul>`,8),m={href:"https://github.com/chmln/sd",target:"_blank",rel:"noopener noreferrer"},b=a(`<ul><li><p>Option</p><ul><li>opt, <a href="#sed-opt">sed_opt</a></li></ul></li><li><p>Example</p></li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- replaces content in string</span>
<span class="token keyword">local</span> res<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">sed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    old <span class="token operator">=</span> <span class="token string">&quot;((([])))&quot;</span><span class="token punctuation">,</span>
    new <span class="token operator">=</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">,</span>
    str <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;lots((([]))) of special chars&quot;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">yassert</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>

<span class="token comment">-- replaces content in files</span>
res<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">sed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    old <span class="token operator">=</span> <span class="token string">&quot;(.*)&quot;</span><span class="token punctuation">,</span>
    new <span class="token operator">=</span> <span class="token string">&quot;//$1&quot;</span><span class="token punctuation">,</span>
    file <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;./test.txt&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function g(h,f){const t=o("ExternalLinkIcon");return i(),l("div",null,[u,s("p",null,[n("grep 绑定 "),s("a",r,[n("ripgrep"),e(t)]),n(" 实现跨平台，这意味着它和 bash 上的原生 grep不同，它能够快速，简单，方便的搜索字符串。")]),d,s("p",null,[n("awk binds for "),s("a",k,[n("goawk"),e(t)]),n(" to implement cross platform, which means it's different with native awk on bash, and can handle or extract string with fast, easy, convenient.")]),v,s("p",null,[n("sed binds for "),s("a",m,[n("sd"),e(t)]),n(" to implement cross platform, which means it's different with native sed on bash, and can handle or replace string with fast, easy, convenient.")]),b])}const _=p(c,[["render",g],["__file","string.html.vue"]]);export{_ as default};
