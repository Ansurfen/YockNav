(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{297:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("Yock没有直接提供Pipeline相关的规范，但是提供了能够搭建Pipeline的相关功能，这也使得yock在调度上更加灵活。")]),t._v(" "),s("h2",{attrs:{id:"job-task"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#job-task"}},[t._v("#")]),t._v(" Job & Task")]),t._v(" "),s("div",{staticClass:"language-lua extra-class"},[s("pre",{pre:!0,attrs:{class:"language-lua"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("---@param name string")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("---@param callback fun(ctx: context)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("job")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("---@param name string")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("---@vararg string")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("jobs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])]),s("p",[t._v("Job: Task的最小组成单元，一个Task可由一个或者多个job组成。从函数签名不难看出，每个job都是一个名称与回调函数相绑定的单元。如果用户在同一份文件中定义同名的job，那yock将会抛出错误，因此每个job名称必须唯一。\nJobs: 编排多个job组成一个Task，与job共享命名空间。这意味着，要是jobs和job出现同名的情况，yock也会直接抛出错误。")]),t._v(" "),s("div",{staticClass:"language-lua extra-class"},[s("pre",{pre:!0,attrs:{class:"language-lua"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--- main.lua")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("job")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"start test..."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("job")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"build"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"start build..."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("job")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"deploy"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"start deploy..."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("jobs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"all"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"build"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"deploy"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("鉴于上文的介绍，我们不难看出这份代码中存在的task(Task由一个或者多个job组成):")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Task")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Jobs")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("test")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("test")])]),t._v(" "),s("tr",[s("td",[t._v("build")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("build")])]),t._v(" "),s("tr",[s("td",[t._v("depoly")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("depoly")])]),t._v(" "),s("tr",[s("td",[t._v("all")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("test, build, depoly")])])])]),t._v(" "),s("p",[t._v("要分task调度他们相当容易，只需要在运行的文件后面加上指定的任务名即可。例如运行all任务，"),s("code",[t._v("yock run main.lua all")]),t._v("。同时运行多个任务也是支持的, "),s("code",[t._v("yock run main.lua all depoly")]),t._v("。每个task之间都是协程异步执行的，而task内的job则是按照顺序依次执行。")]),t._v(" "),s("h2",{attrs:{id:"context"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#context"}},[t._v("#")]),t._v(" Context")]),t._v(" "),s("p",[t._v("根据上文的介绍，除了对Job有一定了解外，相信你一定很好奇job回调函数中传递的context类型的参数是做什么的。顾名思义，它是一个上下文类型，操作着task流程的生命周期。")]),t._v(" "),s("p",[t._v("想象一个这样的场景，在调度"),s("code",[t._v("all")]),t._v("任务期间，如果"),s("code",[t._v("test")]),t._v("计划失败，那是否要继续"),s("code",[t._v("build")]),t._v("的运行呢？这就会产生一个分支，而要控制这一切在用户层面除了引入全局变量外是没办法的。因为yock只是提供了一个回调函数，没有提供编排回调函数的能力。因此，ctx变量应运而生。如果你想要终止整个task那只在回调函数结尾处加上"),s("code",[t._v("ctx.exit(0)")]),t._v("，他将终止本次task的执行。注意task之间是协程异步调度的，因此不会影响整个程序的正常调度，如果你想要结束整个程序只需"),s("code",[t._v("os.exit()")]),t._v("。言归正传，如果你不想结束调度，那可以给exit传递1，他将会继续执行本次task的下一个job。")])])}),[],!1,null,null,null);s.default=e.exports}}]);