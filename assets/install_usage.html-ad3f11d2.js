import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as u,b as r,w as a,e,f as n,d}from"./app-0d28c3d4.js";const p={},h=e("h2",{id:"install",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#install","aria-hidden":"true"},"#"),n(" Install")],-1),m=e("p",null,[e("code",null,"NOTE"),n(": Regardless of the installation method, you need to mount yock to the local environment after downloading. After extracting the package, go to the directory of the executable and run "),e("code",null,"yock run install.lua"),n(" to complete the process.")],-1),b=e("div",{class:"hint-container warning"},[e("p",{class:"hint-container-title"},"Note"),e("p",null,[n("Using third package manager has the problem of version lag, and even though package will be uncompressed with automatical, it's still required to execute install.lua by hand, and therefore it's highly recommended to download by "),e("code",null,"binary"),n(" way.")])],-1),g=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,`https://github.com/Ansurfen/yock/releases
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),v=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"npm"),n(" i @ansurfen/yock "),e("span",{class:"token parameter variable"},"-g"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),f=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[n("pip "),e("span",{class:"token function"},"install"),n(` yock
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),k=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"git"),n(` clone https://github.com/Ansurfen/yock.git

`),e("span",{class:"token builtin class-name"},"cd"),n(` ctl

./build.bat/sh // normal build
./build.bat/sh ffi //build with libffi `),e("span",{class:"token punctuation"},"("),n("gcc or mingw required"),e("span",{class:"token punctuation"},")"),n(`
./build.bat/sh dev //build developer version
./build.bat/sh oslinux //cross compile to linux

// automatically build with libffi version when the last step was finished
yock run install.lua
yock run `),e("span",{class:"token punctuation"},".."),n(`/auto/build-ffi.lua
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),y=d(`<h2 id="enviroment" tabindex="-1"><a class="header-anchor" href="#enviroment" aria-hidden="true">#</a> Enviroment</h2><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>The main goal of this step is to write code more efficiently, so it&#39;s optional.<br> And yock don&#39;t directly provides official plugins, but use thrid party lua&#39;s plugin to get it. Therefore, the following plugins are only recommended.</p></div><p>For VSCode:<br><img src="https://github.com/Ansurfen/ansurfen.github.io/blob/main/images/yock/lua-tip.png?raw=true" alt="lua-tip" loading="lazy"></p><p>For Jetbrain products (such as IDEA, goland, and etc):<br><img src="https://github.com/Ansurfen/YockNav/blob/main/assets/img/lua-tip-idea.png?raw=true" alt="lua-tip" loading="lazy"></p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>When <code>yock run install.lua</code> is executed successfully, you can create a working directory to write and test yock scripts. Run <code>ypm tidy</code> to complete the code definition, and it will create an include directory in the working directory with source files for plugin prompts only.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- main.lua</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello %s!\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Yock&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Create a main.lua file and write down the above. Use <code>yock run main.lua</code> execution. If all goes well, you&#39;ll see the output in the terminal. At this point, Yock&#39;s development environment is configured. The next chapter begins with an introduction to the specific use of yock.</p>`,8);function _(w,x){const t=o("CodeTabs");return c(),u("div",null,[h,m,b,r(t,{id:"11",data:[{id:"binary"},{id:"npm"},{id:"pip"},{id:"self-build"}],"tab-id":"shell"},{title0:a(({value:s,isActive:i})=>[n("binary")]),title1:a(({value:s,isActive:i})=>[n("npm")]),title2:a(({value:s,isActive:i})=>[n("pip")]),title3:a(({value:s,isActive:i})=>[n("self-build")]),tab0:a(({value:s,isActive:i})=>[g]),tab1:a(({value:s,isActive:i})=>[v]),tab2:a(({value:s,isActive:i})=>[f]),tab3:a(({value:s,isActive:i})=>[k]),_:1}),y])}const T=l(p,[["render",_],["__file","install_usage.html.vue"]]);export{T as default};
