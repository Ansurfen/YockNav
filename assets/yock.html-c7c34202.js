import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,d as e}from"./app-aad1477e.js";const t={},i=e(`<h2 id="yocki" tabindex="-1"><a class="header-anchor" href="#yocki" aria-hidden="true">#</a> yocki</h2><ul><li>connect fun(name: string, ip: string, port: integer) # dial server to be specified by ip and port, and name it for call.</li><li>call fun(name: string, fn: string, arg: string): string, err # calls function on specified server</li><li>list fun(): string[] # returns a list of services that have been connected</li></ul><h2 id="pathf" tabindex="-1"><a class="header-anchor" href="#pathf" aria-hidden="true">#</a> pathf()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@vararg string</span>
<span class="token comment">---@return string</span>
<span class="token keyword">function</span> <span class="token function">pathf</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>pathf joins any number of path elements into a single path, separating them with slashes. Empty elements are ignored. The result is Cleaned. However, if the argument list is empty or all its elements are empty, Join returns an empty string. Except joining any number of path, pathf&#39;s first element can alias regular path according to different parameter.</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token operator">#</span> assumes working directory is D<span class="token punctuation">:</span><span class="token operator">/</span>tmp<span class="token operator">/</span>main<span class="token punctuation">.</span>lua
<span class="token function">pathf</span><span class="token punctuation">(</span><span class="token string">&quot;@/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- mapping: {HomeDir}/.yock/a/b</span>
<span class="token function">pathf</span><span class="token punctuation">(</span><span class="token string">&quot;#1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;../a&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- mapping: #1 returns D:/tmp/main.lua path, then joins &quot;../a&quot; to output &quot;D:/tmp/a&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="wrapzip" tabindex="-1"><a class="header-anchor" href="#wrapzip" aria-hidden="true">#</a> wrapzip()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param s string</span>
<span class="token comment">---@return string</span>
<span class="token keyword">function</span> <span class="token function">wrapzip</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>wrapzip returns string that wrapped platform zip format in default</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">wrapzip</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- on windows, result is a.zip</span>

<span class="token function">wrapzip</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- on linux, darwin and etc, result is a.tar.gz</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="wrapexf" tabindex="-1"><a class="header-anchor" href="#wrapexf" aria-hidden="true">#</a> wrapexf()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param s string</span>
<span class="token comment">---@return string</span>
<span class="token keyword">function</span> <span class="token function">wrapexf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>wrapexf returns string that wrapped platform executable filename extension in default</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">wrapexf</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- on windows, result is a.exe</span>

<span class="token function">wrapexf</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- on linux, darwin and etc, result is a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="wrapscript" tabindex="-1"><a class="header-anchor" href="#wrapscript" aria-hidden="true">#</a> wrapscript()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param s string</span>
<span class="token comment">---@return string</span>
<span class="token keyword">function</span> <span class="token function">wrapscript</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>wrapscript returns string that wrapped platform script format in default</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">wrapscript</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- on windows, result is a.bat</span>

<span class="token function">wrapscript</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- on linux, darwin and etc, result is a.sh</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30),l=[i];function p(o,c){return a(),s("div",null,l)}const d=n(t,[["render",p],["__file","yock.html.vue"]]);export{d as default};
