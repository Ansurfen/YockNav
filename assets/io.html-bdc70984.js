import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as e}from"./app-62237bf4.js";const t={},i=e(`<h2 id="echo-mode" tabindex="-1"><a class="header-anchor" href="#echo-mode" aria-hidden="true">#</a> echo_mode</h2><ul><li>&quot;c&quot; # 当文件不存在时创建。</li><li>&quot;t&quot; # 覆盖写打开文件</li><li>&quot;r&quot; # 只读方式打开文件</li><li>&quot;w&quot; # 只写方式打开文件</li><li>&quot;rw&quot; # 以读写的方式打开文件</li><li>&quot;a&quot; # 追加写数据到文件</li><li>&quot;e&quot; # 和 <code>c</code> 一起使用，文件必须不存在。</li><li>&quot;s&quot; # 同步打开 I/O.</li></ul><h2 id="echo" tabindex="-1"><a class="header-anchor" href="#echo" aria-hidden="true">#</a> echo()</h2><ul><li>原型</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@vararg string</span>
<span class="token comment">---@return string[], err</span>
<span class="token keyword">function</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token keyword">end</span>

<span class="token comment">---@param opt echo_opt</span>
<span class="token comment">---@vararg string</span>
<span class="token comment">---@return string[], err</span>
<span class="token keyword">function</span> <span class="token function">echo</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>选项</p><ul><li>mode, <a href="#echo-mode">echo_mode</a> (string), 指明文件如何打开</li><li>fd, string[], fd 是文件描述符的缩写，用于指明流输出何处。你可以使用文件名作为 fd 去写入文件，或者使用 stdout, stderr 打印到终端。</li></ul></li><li><p>介绍</p></li></ul><p>echo 打印可变字符参数到终端，打印的结果将会被保存到数组中返回。除了原始的字符串，你还能打印环境变量对应的值。</p><ul><li>示例</li></ul><p>重载 1:</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> data<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span>
<span class="token function">yassert</span><span class="token punctuation">(</span><span class="token operator">#</span>data <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">and</span> <span class="token keyword">not</span> err<span class="token punctuation">)</span>

<span class="token keyword">local</span> data <span class="token operator">=</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token string">&quot;$Path&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token operator">#</span>data <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">then</span>
 <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Path: &quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">-- 效果等同于 environ(&quot;Path&quot;)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重载 2:</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- append write</span>
<span class="token function">echo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> fd <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;stdout&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test.txt&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> mode <span class="token operator">=</span> <span class="token string">&quot;c|a|rw&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span>

<span class="token comment">-- truncate write</span>
<span class="token function">echo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> fd <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;stdout&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test.txt&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> mode <span class="token operator">=</span> <span class="token string">&quot;c|t|rw&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="clear" tabindex="-1"><a class="header-anchor" href="#clear" aria-hidden="true">#</a> clear()</h2><ul><li>原型</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">function</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>介绍</li></ul><p>clear 清空终端的输出。</p><h2 id="cd" tabindex="-1"><a class="header-anchor" href="#cd" aria-hidden="true">#</a> cd()</h2><ul><li>原型</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param dir string</span>
<span class="token comment">---@return err</span>
<span class="token keyword">function</span> <span class="token function">cd</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>介绍</li></ul><p>cd 改变当前工作目录到指定目录。</p><h2 id="touch" tabindex="-1"><a class="header-anchor" href="#touch" aria-hidden="true">#</a> touch()</h2><ul><li>原型</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param file string</span>
<span class="token comment">---@return err</span>
<span class="token keyword">function</span> <span class="token function">touch</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>介绍</li></ul><p>touch 当文件不存在的时候创建文件。</p><h2 id="cat" tabindex="-1"><a class="header-anchor" href="#cat" aria-hidden="true">#</a> cat()</h2><ul><li>原型</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param file string</span>
<span class="token comment">---@return string, err</span>
<span class="token keyword">function</span> <span class="token function">cat</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>介绍</li></ul><p>cat 读取指定文件的内容。</p><h2 id="ls" tabindex="-1"><a class="header-anchor" href="#ls" aria-hidden="true">#</a> ls()</h2><ul><li>原型</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param dir string</span>
<span class="token comment">---@return string[][], err</span>
<span class="token keyword">function</span> <span class="token function">ls</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token keyword">end</span>

<span class="token comment">---@param dir string</span>
<span class="token comment">---@param callback fun(path: string, info: fileinfo)</span>
<span class="token comment">---@return nil, err</span>
<span class="token keyword">function</span> <span class="token function">ls</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>介绍</li></ul><p>重载 1</p><p>ls 列出指定目录下子目录或文件的信息。</p><p><code>注意</code>: ls 返回的结果不像其他 gnu 命令。为了节约内存，它被设置为数组形式去存储信息。你能够在下面看到它详细信息。</p><p>重载 2</p><p>ls 递归给定的目录，能够在遍历时设置回调函数，接收访问的路径以及路径信息。</p><ul><li>格式信息</li></ul><p>[1] 权限, string, e.g. -rwxrwxrwx, -rw-rw-rw-</p><p>[2] 大小, number</p><p>[3] 修改事件, string, e.g. Aug 6 15:26</p><p>[4] 文件名, string</p><ul><li>示例</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">ls</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> info<span class="token punctuation">)</span>
     <span class="token function">print</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mkdir" tabindex="-1"><a class="header-anchor" href="#mkdir" aria-hidden="true">#</a> mkdir()</h2><ul><li>原型</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@vararg string</span>
<span class="token comment">---@return err</span>
<span class="token keyword">function</span> <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>介绍</li></ul><p>mkdir 递归创建目录。</p><h2 id="cp-opt" tabindex="-1"><a class="header-anchor" href="#cp-opt" aria-hidden="true">#</a> cp_opt</h2><ul><li>recurse?, boolean (default false), 递归复制指定的目录或文件</li><li>force?, boolean (default false), 当为 true，覆盖同名文件</li></ul><h2 id="cp" tabindex="-1"><a class="header-anchor" href="#cp" aria-hidden="true">#</a> cp()</h2><ul><li>原型</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param src string</span>
<span class="token comment">---@param dst string</span>
<span class="token keyword">function</span> <span class="token function">cp</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span> <span class="token keyword">end</span>

<span class="token comment">---@param opt cp_opt</span>
<span class="token comment">---@param path table&lt;string, string&gt;</span>
<span class="token keyword">function</span> <span class="token function">cp</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>介绍</li></ul><p>cp 复制文件或目录从 src 到 dst</p><ul><li><p>选项</p><ul><li>recurse?, boolean (default false), 递归复制指定的目录或文件</li><li>force?, boolean (default false), 当为 true，覆盖同名文件</li></ul></li><li><p>示例</p></li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">--\`注意\`: 这不支持递归，如果你要做它，看另一个重载。</span>
<span class="token function">cp</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span>

<span class="token function">cp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> recurse <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
     <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span>
     <span class="token punctuation">[</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mv" tabindex="-1"><a class="header-anchor" href="#mv" aria-hidden="true">#</a> mv()</h2><ul><li>原型</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param src string</span>
<span class="token comment">---@param dst string</span>
<span class="token keyword">function</span> <span class="token function">mv</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>介绍</li></ul><p>mv moves directory or file from src to dst, supporting recurse</p><h2 id="rm-opt" tabindex="-1"><a class="header-anchor" href="#rm-opt" aria-hidden="true">#</a> rm_opt</h2><ul><li>safe? boolean # is the same with recurse field. Please use recurse instead of it, and it&#39;ll be deprecated in the future.</li><li>pattern? string # remove directory or file to be matched if pattern&#39;s length is more than 0, and obeys golang&#39;s regular expressions.</li><li>recurse? boolean # recurses to remove directory when set true</li></ul><h2 id="rm" tabindex="-1"><a class="header-anchor" href="#rm" aria-hidden="true">#</a> rm()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">--- overload 1</span>
<span class="token comment">---@param opt rm_opt</span>
<span class="token comment">---@vararg string</span>
<span class="token comment">---@return err</span>
<span class="token keyword">function</span> <span class="token function">rm</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token keyword">end</span>

<span class="token comment">--- overload 2</span>
<span class="token comment">---@vararg string</span>
<span class="token comment">---@return err</span>
<span class="token keyword">function</span> <span class="token function">rm</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>overload 1:</p><p>rm removes specified directories or files, and has one function overload of which capacity just like rmdir command on bash.</p><p>overload 2:</p><p>rm removes empty directories or single files to be specified, and just like rmdir command on bash. If you want to remove directory with recurse, see its function overload.</p><ul><li><p>Option</p><ul><li>recurse?, boolean (default false), recurses to remove directory when set true</li><li>pattern?, string, remove directory or file to be matched if pattern&#39;s length is more than 0, and obeys golang&#39;s regular expressions.</li><li>safe?, boolean (default false), is the same with recurse field. Please use recurse instead of it, and it&#39;ll be deprecated in the future.</li></ul></li><li><p>Example</p></li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">--just like rmdir, which only removes empty directory or single files</span>
<span class="token function">rm</span><span class="token punctuation">(</span><span class="token string">&quot;/a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/b&quot;</span><span class="token punctuation">)</span>

<span class="token comment">-- delete file with recuse</span>
<span class="token function">rm</span><span class="token punctuation">(</span><span class="token punctuation">{</span> recurse <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;/a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/b&quot;</span><span class="token punctuation">)</span>

<span class="token comment">-- remove with recurse and pattern</span>
<span class="token function">rm</span><span class="token punctuation">(</span><span class="token punctuation">{</span> recurse <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> pattern <span class="token operator">=</span> <span class="token string">&quot;.exe$&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;/a&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rename" tabindex="-1"><a class="header-anchor" href="#rename" aria-hidden="true">#</a> rename()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param old string</span>
<span class="token comment">---@param new string</span>
<span class="token keyword">function</span> <span class="token function">rename</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> new<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>rename resets filename from old to new</p><h2 id="find-opt" tabindex="-1"><a class="header-anchor" href="#find-opt" aria-hidden="true">#</a> find_opt</h2><ul><li>pattern? string # indicates rule to match directories or files, and writing format same as golang&#39;s regular expressions.</li><li>dir? boolean # match directory when set true</li><li>file? boolean # match file when set true</li></ul><h2 id="find" tabindex="-1"><a class="header-anchor" href="#find" aria-hidden="true">#</a> find()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param opt find_opt</span>
<span class="token comment">---@param path string</span>
<span class="token comment">---@return table, err</span>
<span class="token keyword">function</span> <span class="token function">find</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token keyword">end</span>

<span class="token comment">---@param path string</span>
<span class="token comment">---@return boolean</span>
<span class="token keyword">function</span> <span class="token function">find</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>overload 1</p><p>find scans specified directory with recurse and returns matched results.</p><p>overload 2</p><p>find returns whether file or directory exist according to path.</p><ul><li><p>Option</p><ul><li>opt, <a href="#find-opt">find_opt</a></li></ul></li><li><p>Example</p></li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    dir <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>
    pattern <span class="token operator">=</span> <span class="token string">&quot;\\\\.lua&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;/script&quot;</span><span class="token punctuation">)</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;./test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tarc" tabindex="-1"><a class="header-anchor" href="#tarc" aria-hidden="true">#</a> tarc()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param src string</span>
<span class="token comment">---@param dst string</span>
<span class="token keyword">function</span> <span class="token function">tarc</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>tarc compresses src to dst base on tar.gz algorithm. Directly using it isn&#39;t recommended, you can use compress to instead of it. The compress function abstract tarc and zipc to fit in different platform default format.</p><h2 id="zipc" tabindex="-1"><a class="header-anchor" href="#zipc" aria-hidden="true">#</a> zipc()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param src string</span>
<span class="token comment">---@param dst string</span>
<span class="token keyword">function</span> <span class="token function">zipc</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>zipc compresses src to dst base on zip algorithm. Directly using it isn&#39;t recommended, you can use compress to instead of it. The compress function abstract tarc and zipc to fit in different platform default format.</p><h2 id="untar" tabindex="-1"><a class="header-anchor" href="#untar" aria-hidden="true">#</a> untar()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param src string</span>
<span class="token comment">---@param dst string</span>
<span class="token keyword">function</span> <span class="token function">untar</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>untar uncompress src to dst base on tar.gz algorithm. Directly using it isn&#39;t recommended, you can use uncompress to instead of it. The uncompress function abstract untar and unzip to fit in different platform default format.</p><h2 id="unzip" tabindex="-1"><a class="header-anchor" href="#unzip" aria-hidden="true">#</a> unzip()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param src string</span>
<span class="token comment">---@param dst string</span>
<span class="token keyword">function</span> <span class="token function">unzip</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>unzip uncompress src to dst base on zip algorithm. Directly using it isn&#39;t recommended, you can use uncompress to instead of it. The uncompress function abstract unzip and unzip to fit in different platform default format.</p><h2 id="compress" tabindex="-1"><a class="header-anchor" href="#compress" aria-hidden="true">#</a> compress()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param src string</span>
<span class="token comment">---@param dst string</span>
<span class="token keyword">function</span> <span class="token function">compress</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>compress compresses src to dst base on tar.gz or zip according to filename extension.</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">compress</span><span class="token punctuation">(</span><span class="token string">&quot;./test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test.zip&quot;</span><span class="token punctuation">)</span>
<span class="token function">compress</span><span class="token punctuation">(</span><span class="token string">&quot;./test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test.tar.gz&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uncompress" tabindex="-1"><a class="header-anchor" href="#uncompress" aria-hidden="true">#</a> uncompress()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param src string</span>
<span class="token comment">---@param dst string</span>
<span class="token comment">---@return string, err</span>
<span class="token keyword">function</span> <span class="token function">uncompress</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>uncompress uncompress src to dst base on tar.gz or zip according to filename extension, and returns an absolute path combining dst and root directory of compress package when uncompressed successfully.</p><ul><li>Example</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">uncompress</span><span class="token punctuation">(</span><span class="token string">&quot;./test.zip&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./test&quot;</span><span class="token punctuation">)</span>
<span class="token function">uncompress</span><span class="token punctuation">(</span><span class="token string">&quot;./test.tar.gz&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./test&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="write" tabindex="-1"><a class="header-anchor" href="#write" aria-hidden="true">#</a> write()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param file string</span>
<span class="token comment">---@param data string</span>
<span class="token comment">---@return err</span>
<span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>write writes data to file and creates file when file isn&#39;t exist.</p><h2 id="read" tabindex="-1"><a class="header-anchor" href="#read" aria-hidden="true">#</a> read()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param name string</span>
<span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>read blocks and wait for inputting from user, and builds mapping relationship from given name to input&#39;s value.</p>`,140),l=[i];function o(p,c){return s(),a("div",null,l)}const d=n(t,[["render",o],["__file","io.html.vue"]]);export{d as default};
