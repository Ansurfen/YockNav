import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as e}from"./app-0d28c3d4.js";const t={},o=e(`<h3 id="channel-make" tabindex="-1"><a class="header-anchor" href="#channel-make" aria-hidden="true">#</a> channel.make()</h3><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@return chan</span>
<span class="token keyword">function</span> channel<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce<br> make returns a new chan</li></ul><h3 id="channel-select" tabindex="-1"><a class="header-anchor" href="#channel-select" aria-hidden="true">#</a> channel.select()</h3><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@vararg any</span>
<span class="token keyword">function</span> channel<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>Introduce<br> select just like golang&#39;s select grammatical sugar, which is designed for handling chan operation. Therefore, every case must be a available chan operation, send or receive. select will listen all message from given case and execute corresponding function. If there are multiple chan is ready at the moment, select will choose to execute with random. On the contrary, if none are ready, select will execute default case when it exists.</p></li><li><p>Syntax</p><ul><li>{&quot;|&lt;-&quot;, chan, fun(ok: bool, v: any)}, callback when message was received</li><li>{&quot;&lt;-|&quot;, chan, v: any}, send message from chan</li><li>{&quot;default&quot;, fun()}, if none are ready, execute default case</li></ul></li><li><p>Example</p></li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> ch <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token keyword">true</span> <span class="token keyword">do</span>
        channel<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">&quot;|&lt;-&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>ok<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token comment">-- wait message from chan</span>
            <span class="token function">print</span><span class="token punctuation">(</span>ok<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
        <span class="token keyword">end</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- if none, execute default case</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;do nothing&quot;</span><span class="token punctuation">)</span>
            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">500</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
        <span class="token keyword">end</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>
<span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">local</span> i <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">while</span> <span class="token keyword">true</span> <span class="token keyword">do</span>
        channel<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">&quot;&lt;-|&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">,</span> i <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">-- continuous send i as message per second</span>
        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>
time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),p=[o];function c(l,i){return s(),a("div",null,p)}const d=n(t,[["render",c],["__file","chan.html.vue"]]);export{d as default};
