import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as e}from"./app-62237bf4.js";const t={},l=e(`<h2 id="sshclient" tabindex="-1"><a class="header-anchor" href="#sshclient" aria-hidden="true">#</a> sshClient</h2><ul><li>Exec fun(self: sshClient, cmd: string): string, err # execute command on remote host.</li><li>Sh fun(self: sshClient, file: string, ...): string, err # upload local script to remote, create temporary file and execute it on remote host. File-name extension is set automatically based-on remote&#39;s os (windows: .bat, posix: .sh).</li><li>Shell fun(self: sshClient) # redirect stdio, stdin, stderr to this terminal and allocate a shell to handle.</li><li>OS fun(self: sshClient): string # returns os for remote host. If not get, returns unknown. Its implement is execute <code>echo $OSTYPE</code> and <code>echo %OS%</code> to infer.</li><li>Get fun(self: sshClient, src: string, dst: string): err # fetches src from remote host and saves it to dst on local. Just like ftp, but it&#39;s based-on sftp protocol.</li><li>Put fun(self: sshClient, src: string, dst: string): err # upload src on local to dst on remote. Just like ftp, but it&#39;s based-on sftp protocol.</li></ul><h2 id="sshclient-exec" tabindex="-1"><a class="header-anchor" href="#sshclient-exec" aria-hidden="true">#</a> sshClient:Exec()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param cmd string</span>
<span class="token comment">---@return string, err</span>
<span class="token keyword">function</span> sshClient<span class="token punctuation">:</span><span class="token function">Exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><h2 id="sshclient-sh" tabindex="-1"><a class="header-anchor" href="#sshclient-sh" aria-hidden="true">#</a> sshClient:Sh()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param file string</span>
<span class="token comment">---@vararg any</span>
<span class="token comment">---@return string, err</span>
<span class="token keyword">function</span> sshClient<span class="token punctuation">:</span><span class="token function">Sh</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><h2 id="sshclient-os" tabindex="-1"><a class="header-anchor" href="#sshclient-os" aria-hidden="true">#</a> sshClient:OS()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@return string</span>
<span class="token keyword">function</span> sshClient<span class="token punctuation">:</span><span class="token function">OS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><h2 id="sshclient-shell" tabindex="-1"><a class="header-anchor" href="#sshclient-shell" aria-hidden="true">#</a> sshClient:Shell()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">function</span> sshClient<span class="token punctuation">:</span><span class="token function">Shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><h2 id="sshclient-get" tabindex="-1"><a class="header-anchor" href="#sshclient-get" aria-hidden="true">#</a> sshClient:Get()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param src string</span>
<span class="token comment">---@param dst string</span>
<span class="token comment">---@return err</span>
<span class="token keyword">function</span> sshClient<span class="token punctuation">:</span><span class="token function">Get</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><h2 id="sshclient-put" tabindex="-1"><a class="header-anchor" href="#sshclient-put" aria-hidden="true">#</a> sshClient:Put()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param src string</span>
<span class="token comment">---@param dst string</span>
<span class="token comment">---@return err</span>
<span class="token keyword">function</span> sshClient<span class="token punctuation">:</span><span class="token function">Put</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><h2 id="ssh-opt" tabindex="-1"><a class="header-anchor" href="#ssh-opt" aria-hidden="true">#</a> ssh_opt</h2><ul><li>user string # account what you want to login in on remote</li><li>pwd string # user&#39;s password</li><li>ip string # remote ip</li><li>port integer # running port of ssh server</li><li>network string # indicates network protocol (tcp, udp) to dial</li><li>redirect boolean</li></ul><h2 id="ssh" tabindex="-1"><a class="header-anchor" href="#ssh" aria-hidden="true">#</a> ssh()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param opt ssh_opt</span>
<span class="token comment">---@param cb fun(client: sshClient)</span>
<span class="token comment">---@return sshClient</span>
<span class="token keyword">function</span> <span class="token function">ssh</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>ssh dial remote host to be specified by ssh_opt. There are two different method to handle it, but it should be three to be exact. Either way, the effect is the same.</p><ul><li><p>Option</p><ul><li>user, string, account what you want to login in on remote</li><li>pwd, string, user&#39;s password</li><li>ip, string, remote ip</li><li>port, integer, running port of ssh server</li><li>network, string, indicates network protocol (tcp, udp) to dial</li></ul></li><li><p>Example</p></li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- method 1, callback</span>
<span class="token function">ssh</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    user <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>
    pwd <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>
    ip <span class="token operator">=</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
    port <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">,</span>
    network <span class="token operator">=</span> <span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
    c<span class="token punctuation">:</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">&quot;echo Hello World&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>

<span class="token comment">-- method 2, variable</span>
<span class="token keyword">local</span> c <span class="token operator">=</span> <span class="token function">ssh</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    user <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>
    pwd <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>
    ip <span class="token operator">=</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
    port <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">,</span>
    network <span class="token operator">=</span> <span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
c<span class="token punctuation">:</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">&quot;echo Hello World&quot;</span><span class="token punctuation">)</span>

<span class="token comment">-- method 3, combine above two method</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35),i=[l];function o(c,p){return s(),a("div",null,i)}const d=n(t,[["render",o],["__file","ssh.html.vue"]]);export{d as default};
