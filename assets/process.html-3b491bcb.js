import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as e}from"./app-62237bf4.js";const t={},i=e(`<h2 id="nohup" tabindex="-1"><a class="header-anchor" href="#nohup" aria-hidden="true">#</a> nohup()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param cmd string</span>
<span class="token comment">---@return err</span>
<span class="token keyword">function</span> <span class="token function">nohup</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>nohup launches backend process hidden window.</p><h2 id="pgrep-info" tabindex="-1"><a class="header-anchor" href="#pgrep-info" aria-hidden="true">#</a> pgrep_info</h2><ul><li>name string</li><li>pid integer</li></ul><h2 id="pgrep" tabindex="-1"><a class="header-anchor" href="#pgrep" aria-hidden="true">#</a> pgrep()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param name string</span>
<span class="token comment">---@return pgrep_info[]</span>
<span class="token keyword">function</span> <span class="token function">pgrep</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>pgrep returns results according to process&#39;s name.</p><h2 id="ps-info" tabindex="-1"><a class="header-anchor" href="#ps-info" aria-hidden="true">#</a> ps_info</h2><ul><li>name string</li><li>cmd string</li><li>cpu? number</li><li>start? number</li><li>mem? any</li><li>user? string</li></ul><h2 id="ps-opt" tabindex="-1"><a class="header-anchor" href="#ps-opt" aria-hidden="true">#</a> ps_opt</h2><ul><li>user? boolean # includes process&#39;s launcher when set true</li><li>cpu? boolean # includes cpu usage ratio at calling moment when set true</li><li>time? boolean # includes process&#39;s start time when set true</li><li>mem? boolean # includes process&#39;s memory usage ratio when set true</li></ul><h2 id="ps" tabindex="-1"><a class="header-anchor" href="#ps" aria-hidden="true">#</a> ps()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param opt ps_opt|string|integer|nil</span>
<span class="token comment">---@return table&lt;integer, ps_info&gt;</span>
<span class="token keyword">function</span> <span class="token function">ps</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>ps lists all process state when opt is nil. It&#39;s worthy of noting that there only are cmd (command) and name (process&#39;s name) field in default. If you want to get detailed info, try to use ps_opt (table) format to make it.</p><p>Except above two method introduced, there are two way to query, and the one is indicated pid, and the other passes by string to do fuzzy matching according to cmd.</p><ul><li><p>Option</p><ul><li>opt, <a href="#ps-opt">ps_opt</a></li></ul></li><li><p>Example</p></li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> info<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">ps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- fetches all</span>
<span class="token function">yassert</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
table<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>
<span class="token function">ps</span><span class="token punctuation">(</span><span class="token punctuation">{</span> mem <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> user <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">-- gets all with launcher and memory usage ratio info</span>
<span class="token function">ps</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">-- queries process of pid 20</span>
<span class="token function">ps</span><span class="token punctuation">(</span><span class="token string">&quot;yock&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- fuzzy queries process of command with yock</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="kill" tabindex="-1"><a class="header-anchor" href="#kill" aria-hidden="true">#</a> kill()</h2><ul><li>Prototype</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">---@param k integer|string</span>
<span class="token comment">---@return err</span>
<span class="token keyword">function</span> <span class="token function">kill</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Introduce</li></ul><p>kill kills process according to pid or process&#39;s name.</p>`,29),l=[i];function o(p,c){return s(),a("div",null,l)}const d=n(t,[["render",o],["__file","process.html.vue"]]);export{d as default};
